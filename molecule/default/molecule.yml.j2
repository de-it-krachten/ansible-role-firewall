---

dependency:
  name: galaxy
driver:
  name: docker
lint: |
  set -e
  yamllint .
  ln -fs molecule/default/requirements.yml
  ansible-lint
  rm -f requirements.yml
platforms:
{% for platform in MOLECULE_DISTROS %}
  - name: firewall-{{ platform.name }}-node1
    image: "{{ platform.image }}"
    rhsm: {{ platform.rhsm | default(False) }}
    command: ${MOLECULE_DOCKER_COMMAND:-""}
{% if platform.environment is defined %}
    environment:
{% for key, value in platform.environment.items() %}
      {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
{% if platform.volumes is defined %}
{% for volume in platform.volumes %}
      - firewall-{{ volume }}
{% endfor %}
{% endif %}
{% if platform.networks is defined %}
    networks:
{% for network in platform.networks %}
      - name: firewall-{{ network }}
{% endfor %}
{% endif %}
{% if platform.ports is defined %}
    published_ports:
{% for port in platform.ports %}
      - {{ port }}
{% endfor %}
{% endif %}
    cgroupns_mode: host
    privileged: {{ platform.privileged | default(True) }}
    pre_build_image: {{ platform.pre_build_image | default(True) }}
    dockerfile: Dockerfile.{{ platform.name }}.j2
{% endfor %}
provisioner:
  name: ansible
{% if MOLECULE_ANSIBLE_ARGS is defined %}
  ansible_args:
{% for molecule_ansible_arg in MOLECULE_ANSIBLE_ARGS %}
    - {{ molecule_ansible_arg }}
{% endfor %}
{% endif %}
  env:
    ANSIBLE_PIPELINING: "True"
  lint:
    name: ansible-lint
  playbooks:
    converge: ${MOLECULE_PLAYBOOK:-converge.yml}
  inventory:
    group_vars: {}
    host_vars: {}
scenario:
  name: default
verifier:
  name: ansible
