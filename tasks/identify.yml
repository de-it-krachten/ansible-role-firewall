---

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Identifiy firewall active (ufw)
  ansible.builtin.set_fact:
    firewall_running: ufw
  when:
    - ansible_facts.services['ufw'] is defined
    - ansible_facts.services['ufw']['state'] == 'running'
    - firewall_running is undefined

- name: Identifiy firewall active (ufw.service)
  ansible.builtin.set_fact:
    firewall_running: ufw
  when:
    - ansible_facts.services['ufw.service'] is defined
    - ansible_facts.services['ufw.service']['state'] == 'running'
    - firewall_running is undefined

- name: Identifiy firewall active (nftables)
  ansible.builtin.set_fact:
    firewall_running: nftables
  when:
    - ansible_facts.services['nftables'] is defined
    - ansible_facts.services['nftables']['state'] == 'running'
    - firewall_running is undefined

- name: Identifiy firewall active (nftables.service)
  ansible.builtin.set_fact:
    firewall_running: nftables
  when:
    - ansible_facts.services['nftables.service'] is defined
    - ansible_facts.services['nftables.service']['state'] == 'running'
    - firewall_running is undefined

- name: Identifiy firewall active (firewalld)
  ansible.builtin.set_fact:
    firewall_running: firewalld
  when:
    - ansible_facts.services['firewalld'] is defined
    - ansible_facts.services['firewalld']['state'] == 'running'
    - firewall_running is undefined

- name: Identifiy firewall active (firewalld.service)
  ansible.builtin.set_fact:
    firewall_running: firewalld
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service']['state'] == 'running'
    - firewall_running is undefined

- name: Assume iptables if noting else found
  when:
    - firewall_running is undefined
  block:

    - name: Search for iptables binary
      ansible.builtin.command: which iptables
      changed_when: false
      failed_when: false
      register: _iptables

    - name: Make sure iptables functions
      ansible.builtin.command: iptables -L
      changed_when: false
      register: _iptables_list
      when: _iptables.stdout | length > 0

    - name: Assume iptables when binary is found and functioning
      ansible.builtin.set_fact:
        firewall_running: iptables
      when:
        - _iptables.stdout | length > 0
        - _iptables_list.rc == 0

- name: Set firewall found
  ansible.builtin.set_fact:
    firewall_type: "{{ firewall_running | default('unknown') }}"
